{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","isReversed","setIsReversed","Default","sortBy","setSortBy","visibleGoods","goodsCopy","Length","sort","good1","good2","length","Alphabet","localeCompare","reverse","getSortedGoods","className","type","cn","onClick","isReverted","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,WAAAA,E,gBAAAA,E,qBAAAA,M,KAML,IAwBaE,EAAU,WACrB,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAASH,EAAOM,SAA5C,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EA3Be,SAACF,EAAgBH,GACtC,IAAMM,EAAS,UAAOT,GAEtB,OAAQM,GACN,KAAKP,EAAOW,OACVD,EAAUE,MAAK,SAACC,EAAOC,GAAR,OACbD,EAAME,OAASD,EAAMC,UAEvB,MACF,KAAKf,EAAOgB,SACVN,EAAUE,MAAK,SAACC,EAAOC,GAAR,OACbD,EAAMI,cAAcH,MAQ1B,OAAOV,EACHM,EAAUQ,UACVR,EAMiBS,CAAeZ,EAAQH,GAmB5C,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYtB,EAAOgB,WAAaT,IAEpCgB,QA3BqB,WAC3Bf,EAAUR,EAAOgB,WAmBb,iCAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYf,IAAWP,EAAOW,SAElCY,QAnCmB,WACzBf,EAAUR,EAAOW,SA2Bb,4BAYA,wBACEU,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAA2B,IAAflB,IAEhBmB,QA3Cc,WACpBlB,GAAc,SAAAmB,GAAU,OAAKA,MAmCzB,sBAaGpB,GAAcG,IAEb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAlDQ,WAClBlB,GAAc,GACdG,EAAUR,EAAOM,UA6CT,sBAWN,6BAEIG,EAAagB,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC5HrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.278617c7.chunk.js","sourcesContent":["import { FC, useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  Default = '',\n  Length = 'length',\n  Alphabet = 'alphabet',\n}\n\nconst getSortedGoods = (sortBy: SortBy, isReversed: boolean): string[] => {\n  const goodsCopy = [...goodsFromServer];\n\n  switch (sortBy) {\n    case SortBy.Length:\n      goodsCopy.sort((good1, good2) => (\n        good1.length - good2.length\n      ));\n      break;\n    case SortBy.Alphabet:\n      goodsCopy.sort((good1, good2) => (\n        good1.localeCompare(good2)\n      ));\n      break;\n\n    default:\n      break;\n  }\n\n  return isReversed\n    ? goodsCopy.reverse()\n    : goodsCopy;\n};\n\nexport const App: FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortBy, setSortBy] = useState(SortBy.Default);\n  const visibleGoods = getSortedGoods(sortBy, isReversed);\n\n  const handleSortByAlphabet = () => {\n    setSortBy(SortBy.Alphabet);\n  };\n\n  const handleSortByLength = () => {\n    setSortBy(SortBy.Length);\n  };\n\n  const switchReverse = () => {\n    setIsReversed(isReverted => !isReverted);\n  };\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortBy(SortBy.Default);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': SortBy.Alphabet !== sortBy },\n          )}\n          onClick={handleSortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortBy !== SortBy.Length },\n          )}\n          onClick={handleSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': isReversed === false },\n          )}\n          onClick={switchReverse}\n        >\n          Reverse\n        </button>\n\n        {\n          (isReversed || sortBy)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleReset}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {\n          visibleGoods.map(good => (\n            <li key={good} data-cy=\"Good\">{good}</li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}